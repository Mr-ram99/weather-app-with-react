{"version":3,"sources":["Components/CityComponent.js","Components/WeatherInfo.js","App.js","index.js"],"names":["WeatherLogo","styled","img","CitySelectLabel","label","SearchBox","form","CityComponent","props","updateCity","fetchWeather","src","onSubmit","type","placeholder","onChange","e","target","value","autoFocus","WeatherCondition","div","Condition","span","Location","WeatherInfoLabel","WeatherInfoContainer","InfoContainer","InfoIcon","InfoLabel","InfoIcons","BackButton","button","InfoComponent","name","icon","WeatherInfo","timeStamp","weather","isDay","includes","Math","floor","main","temp","description","WeatherIcons","sys","country","Date","getHours","getMinutes","humidity","wind","speed","pressure","onClick","window","location","reload","Container","AppCaption","App","useState","city","updateWeather","a","preventDefault","axios","get","response","data","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.41d04b03.chunk.js","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\nconst WeatherLogo = styled.img`\r\nwidth:120px;\r\nheight:120px;\r\nmargin:20px auto;\r\n`;\r\nconst CitySelectLabel=styled.label`\r\nfont-size:16px;\r\nfont-family: 'Varela', sans-serif;\r\npadding:10px;\r\nfont-weight:bold;\r\n`;\r\n\r\nconst SearchBox = styled.form`\r\ndisplay:flex;\r\nflex-direction:row;\r\nmargin:40px auto;\r\nfont-size:16px;\r\nfont-family: 'Varela', sans-serif;\r\n& input{\r\n    background:transparent;\r\n    margin:0 5px;\r\n    padding:10px;\r\n    border:none;\r\n    border-bottom:1px solid black;\r\n    border-radius:2px;\r\n    font-weight:bold;\r\n    \r\n}\r\n& button {\r\n    padding:5px 15px;\r\n    background:#8380b6;\r\n    border:none;\r\n    color:white;\r\n    font-size:16px;\r\n    font-weight:bold;\r\n    cursor:pointer;\r\n}\r\n`;\r\n\r\nconst CityComponent = (props) => {\r\n    const {updateCity, fetchWeather} =props ;\r\n    return (\r\n        <>\r\n            <WeatherLogo src=\"/icons/cloudy.png\"></WeatherLogo>\r\n            <CitySelectLabel>Find Weather Of Your City</CitySelectLabel>\r\n            <SearchBox onSubmit={fetchWeather}>\r\n                <input type=\"text\"  placeholder=\"Enter City\" onChange={e=>updateCity(e.target.value)} autoFocus/>\r\n                <button type=\"submit\">Search</button>\r\n            </SearchBox>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CityComponent\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { WeatherIcons } from '../App';\r\nconst WeatherCondition = styled.div`\r\ndisplay:flex;\r\nflex-direction:row;\r\nwidth:100%;\r\nalign-items:center;\r\njustify-content:center;\r\n`;\r\n\r\nconst Condition =styled.span`\r\nmargin:10px 25px;\r\nfont-size:16px;\r\n& span{\r\n    font-size:25px;\r\n}\r\n`;\r\nconst WeatherLogo = styled.img`\r\nwidth:80px;\r\nheight:80px;\r\nmargin:10px auto;\r\n`;\r\nconst Location = styled.div`\r\nmargin:10px auto;\r\nfont-size:22px;\r\nfont-weight:bold;\r\n`;\r\nconst WeatherInfoLabel = styled.span`\r\nfont-size:16px;\r\nmargin:10px;\r\ntext-align:start;\r\nwidth:90%;\r\nfont-weight:bold;\r\n`;\r\nconst WeatherInfoContainer=styled.div`\r\ndisplay:flex;\r\nflex-direction:row;\r\nflex-wrap:wrap;\r\njustify-content:center;\r\nalign-items:center;\r\n`;\r\nconst InfoContainer = styled.span`\r\ndisplay:flex;\r\npadding:10px;\r\nmargin:5px;\r\nwidth:120px;\r\nbox-shadow:3px 3px 10px #1b1b1b;\r\n`;\r\nconst InfoIcon = styled.img`\r\nwidth:40px;\r\nheight:40px;\r\npadding:5px;\r\n`;\r\nconst InfoLabel = styled.label`\r\ndisplay:flex;\r\nflex-direction:column;\r\npadding:5px;\r\n`;\r\nconst InfoIcons = {\r\n    sunrise:\"/weather-app-with-react/blob/gh-pages/icons/sun.png\",\r\n    sunset:\"/weather-app-with-react/blob/gh-pages/icons/sun.png\",\r\n    wind:\"/weather-app-with-react/blob/gh-pages/icons/wind.png\",\r\n    pressure:\"/weather-app-with-react/blob/gh-pages/icons/pressure.png\",\r\n    humidity:\"/weather-app-with-react/blob/gh-pages/icons/humidity.png\"\r\n}\r\nconst BackButton = styled.button`\r\nwidth:90%;\r\npadding:10px;\r\nmargin:10px auto;\r\nbackground:#B4D6D3;\r\nborder:none;\r\nbox-shadow:2px 2px 5px #1a1a1a;\r\ncursor:pointer;\r\n`;\r\nconst InfoComponent = (props) =>{\r\n    const {name,value,icon}= props;\r\n    return (\r\n        <InfoContainer>\r\n            <InfoIcon src={icon}/>\r\n            <InfoLabel>\r\n                {value}\r\n                <span>\r\n                    {name}\r\n                </span>\r\n            </InfoLabel>\r\n        </InfoContainer>\r\n    )\r\n}\r\nconst WeatherInfo = (props) => {\r\n    const {weather} = props;\r\n    const isDay = weather?.weather[0].icon?.includes('d')\r\n    const getTime = (timeStamp) => {\r\n        return `${new Date(timeStamp * 1000).getHours()} : ${new Date(timeStamp * 1000).getMinutes()}`\r\n    }\r\n    return (\r\n        <>\r\n            <WeatherCondition>\r\n                <Condition>\r\n                <span>{`${Math.floor(weather?.main?.temp - 273)}Â°C`}</span>\r\n                    {`  |  ${weather?.weather[0].description}`}\r\n                </Condition>\r\n                <WeatherLogo src={WeatherIcons[weather?.weather[0].icon]}></WeatherLogo>\r\n            </WeatherCondition>\r\n            <Location>{`${weather?.name}, ${weather?.sys?.country}`}</Location>\r\n            <WeatherInfoLabel>Weather Info</WeatherInfoLabel>\r\n            <WeatherInfoContainer>\r\n                <InfoComponent name={isDay ? \"sunset\" : \"sunrise\"} value={`${getTime(weather?.sys[isDay ? \"sunset\" : \"sunrise\"])}`} icon={InfoIcons.sunrise}/>\r\n                <InfoComponent name={\"Humidity\"} value={`${weather?.main?.humidity}%`} icon={InfoIcons.humidity}/>\r\n                <InfoComponent name={\"Wind\"} value={`${weather?.wind?.speed}m/s`} icon={InfoIcons.wind}/>\r\n                <InfoComponent name={\"Pressure\"} value={`${weather?.main?.pressure}hPa`} icon={InfoIcons.pressure}/>\r\n            </WeatherInfoContainer>\r\n            <BackButton type=\"button\" onClick={()=>{window.location.reload()}}>&larr;&nbsp;Go back</BackButton>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default WeatherInfo\r\n","import axios from 'axios'\nimport React , {useState} from 'react'\nimport styled from 'styled-components'\nimport './App.css'\nimport CityComponent from './Components/CityComponent'\nimport WeatherInfo from './Components/WeatherInfo'\n\nconst apiid='b13ad1f5f5265ec7387e910f9c9b5544'\nconst Container = styled.div`\nbackground: url(\"/icons/background1.jpg\") no-repeat center center;\ndisplay :flex;\nflex-direction:column;\nwidth:340px;\nalign-items:center;\nmargin:10vh auto;\nbox-shadow:2px 2px 5px #1b1b1b;\nborder-radius:5px;\npadding:10px;\n@media only screen and (max-width:380px){\n  width:300px;\n}\n`;\nconst AppCaption = styled.div`\nmargin:20px auto;\nfont-size:20px;\nfont-weight:bold;\nfont-family: 'Varela', sans-serif;\n@media only screen and (max-width:380px){\n  margin:10px auto;\n}\n`;\nexport const WeatherIcons = {\n  \"01d\": \"/weather-app-with-react/blob/gh-pages/icons/sunny.svg\",\n  \"01n\": \"/weather-app-with-react/blob/gh-pages/icons/night.svg\",\n  \"02d\": \"/weather-app-with-react/blob/gh-pages/icons/day.svg\",\n  \"02n\": \"/weather-app-with-react/blob/gh-pages/icons/cloudy-night.svg\",\n  \"03d\": \"/weather-app-with-react/blob/gh-pages/icons/cloudy.svg\",\n  \"03n\": \"/weather-app-with-react/blob/gh-pages/icons/cloudy.svg\",\n  \"04d\": \"/weather-app-with-react/blob/gh-pages/icons/perfect-day.svg\",\n  \"04n\": \"/weather-app-with-react/blob/gh-pages/icons/cloudy-night.svg\",\n  \"09d\": \"/weather-app-with-react/blob/gh-pages/icons/rain.svg\",\n  \"09n\": \"/weather-app-with-react/blob/gh-pages/icons/rain-night.svg\",\n  \"10d\": \"/weather-app-with-react/blob/gh-pages/icons/rain.svg\",\n  \"10n\": \"/weather-app-with-react/blob/gh-pages/icons/rain-night.svg\",\n  \"11d\": \"/weather-app-with-react/blob/gh-pages/icons/storm.svg\",\n  \"11n\": \"/weather-app-with-react/blob/gh-pages/icons/storm.svg\",\n  \"50n\": \"/weather-app-with-react/blob/gh-pages/icons/haze.png\",\n  \"50d\": \"/weather-app-with-react/blob/gh-pages/icons/haze.png\"\n};\nfunction App() {\n  const [city, updateCity] = useState();\n  const [weather, updateWeather] = useState();\n  const fetchWeather= async (e)=> {\n    e.preventDefault();\n    const response = await axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiid}`);\n    updateWeather(response.data);\n\n  }\n  return (\n    <Container>\n      <AppCaption>The Weather App</AppCaption>\n      {\n        (city && weather )?\n        <WeatherInfo weather={weather} city={city}/> :\n        <CityComponent updateCity={updateCity} fetchWeather={fetchWeather}/>\n         \n      }\n    </Container>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}